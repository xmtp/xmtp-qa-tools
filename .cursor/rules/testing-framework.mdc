---
description: 
globs: 
alwaysApply: true
---

# XMTP Testing Worker Framework Rules

## Core Testing Pattern

```typescript
import { getWorkersWithVersions } from "@helpers/client";
import { logError } from "@helpers/logger";
import { verifyMessageStream } from "@helpers/streams";
import { setupTestLifecycle } from "@helpers/vitest";

import { getWorkers } from "@workers/manager";
import { describe, expect, it } from "vitest";

const testName = "my-test";

describe(testName, async () => {
  const workers = await getWorkers(
    getWorkersWithVersions(["alice", "bob"]),
    testName,
    typeofStream.Message,
  );

  setupTestLifecycle({
    testName,
    expect,
  });

  it("should do something", async () => {
    try {
      // Test logic here
    } catch (e) {
      logError(e, expect.getState().currentTestName);
      throw e;
    }
  });
});
```

## Worker Access Patterns

```typescript
// Get specific workers
const alice = workers.get("alice");
const bob = workers.get("bob");

// Access worker properties
alice.client; // XMTP client
alice.worker; // Worker thread
alice.name; // "alice"
alice.address; // Ethereum address
alice.client.inboxId; // Inbox ID

// Utility methods
workers.getCreator(); // First worker
workers.getReceiver(); // Random non-creator
workers.getAll(); // All workers array
workers.getAllButCreator(); // All except first
workers.getRandomWorkers(2); // Random subset
```

## Conversation Operations

```typescript
// Create DM by inbox ID
const dm = await alice.client.conversations.newDm(bob.client.inboxId);

// Create DM by Ethereum address
const dm2 = await alice.client.conversations.newDmWithIdentifier({
  identifier: bob.address,
  identifierKind: IdentifierKind.Ethereum,
});

// Create group with inbox IDs
const group = await alice.client.conversations.newGroup([
  bob.client.inboxId,
  workers.get("charlie").client.inboxId,
]);

// Create group between all workers
const testGroup = await workers.createGroupBetweenAll("My Group");

// Send messages
await dm.send("Hello DM");
await group.send("Hello Group");
```

## Group Operations

```typescript
// Group metadata
await group.updateName("New Name");
await group.updateDescription("New Description");

// Member management
await group.addMembers([newMemberInboxId]);
await group.removeMembers([memberInboxId]);

// Admin management
await group.addAdmin(memberInboxId);
await group.addSuperAdmin(memberInboxId);

// Get group info
const members = await group.members();
const name = group.name;
const admins = group.admins;
```

## Streams and Stream Verification

### Stream Types Available

```typescript
import { typeofStream } from "@workers/main";

// Available stream types
typeofStream.Message;           // Message delivery streams
typeofStream.MessageandResponse; // Message streams with automatic responses
typeofStream.GroupUpdated;      // Group metadata and membership updates
typeofStream.Conversation;      // New conversation creation events
typeofStream.Consent;           // Consent state changes
```

### Manual Stream Control

Start and stop streams dynamically during test execution:

```typescript
// Start specific stream types on demand
workers.getReceiver().worker.startStream(typeofStream.Message);
workers.getReceiver().worker.startStream(typeofStream.GroupUpdated);
workers.getReceiver().worker.startStream(typeofStream.Conversation);

// Start streams for multiple workers
workers.getAllButCreator().forEach(worker => {
  worker.worker.startStream(typeofStream.Message);
});

// Stop all streams for a worker
workers.getReceiver().worker.endStream();

// Stop specific stream type
workers.getReceiver().worker.endStream(typeofStream.Message);
```

### Stream Verification Functions

#### Message Streams

```typescript
// Verify message delivery with custom template
const verifyResult = await verifyMessageStream(
  conversation,
  [workers.get("bob")], // receivers
  10, // message count
  "test-{i}-{randomSuffix}", // message template
);

// Check delivery results
expect(verifyResult.allReceived).toBe(true);
expect(verifyResult.receptionPercentage).toBeGreaterThan(95);
expect(verifyResult.averageEventTiming).toBeLessThan(500);
```

#### Group Metadata Streams

```typescript
// Verify group metadata updates (name changes)
const verifyResult = await verifyMetadataStream(
  group,
  workers.getAllButCreator(), // receivers
  3, // number of name updates
  "GroupName-{i}-{randomSuffix}", // name template
);
expect(verifyResult.allReceived).toBe(true);
```

#### Membership Streams

```typescript
// Verify member addition notifications
const verifyResult = await verifyMembershipStream(
  group,
  workers.getAllButCreator(), // receivers
  [newMemberInboxId], // members to add
);
expect(verifyResult.allReceived).toBe(true);
```

#### Conversation Streams

```typescript
// Verify new conversation creation notifications
const verifyResult = await verifyConversationStream(
  workers.getCreator(), // initiator
  [workers.getReceiver()], // receivers
);
expect(verifyResult.allReceived).toBe(true);
```

#### Consent Streams

```typescript
// Verify consent state change notifications
const verifyResult = await verifyConsentStream(
  workers.getCreator(), // initiator
  workers.getReceiver(), // receiver
);
expect(verifyResult.allReceived).toBe(true);
```

#### Bot Response Streams

```typescript
// Verify bot response timing
const verifyResult = await verifyBotMessageStream(
  conversation,
  [workers.getReceiver()], // receivers
  "trigger message", // message to trigger bot response
);
expect(verifyResult.averageEventTiming).toBeLessThan(1000);
```

### Stream Result Analysis

All stream verification functions return a `VerifyStreamResult` object:

```typescript
type VerifyStreamResult = {
  allReceived: boolean;           // True if all expected events received
  almostAllReceived: boolean;     // True if ≤2 events missing
  receiverCount: number;          // Number of receiving workers
  messages: string;               // Comma-separated received messages
  eventTimings: string;           // Timing data per receiver
  averageEventTiming: number;     // Average delivery time in ms
  receptionPercentage: number;    // Percentage of successfully received events
  orderPercentage: number;        // Percentage of receivers with correct order
};

// Example usage
const result = await verifyMessageStream(conversation, receivers, 5);

console.log(`Reception: ${result.receptionPercentage}%`);
console.log(`Order: ${result.orderPercentage}%`);
console.log(`Average timing: ${result.averageEventTiming}ms`);

// Flexible assertions based on requirements
expect(result.allReceived || result.almostAllReceived).toBe(true);
expect(result.receptionPercentage).toBeGreaterThan(90);
expect(result.averageEventTiming).toBeLessThan(2000);
```

### Stream Testing Best Practices

#### 1. Start Streams Before Actions

```typescript
// ✅ Good: Start streams before triggering events
workers.getReceiver().worker.startStream(typeofStream.Message);
await conversation.send("Hello");

// ❌ Bad: Start streams after triggering events  
await conversation.send("Hello");
workers.getReceiver().worker.startStream(typeofStream.Message);
```

#### 2. Use Appropriate Stream Types

```typescript
// For message delivery testing
worker.worker.startStream(typeofStream.Message);

// For group updates (name, description, membership)
worker.worker.startStream(typeofStream.GroupUpdated);

// For new conversation notifications
worker.worker.startStream(typeofStream.Conversation);

// For consent state changes
worker.worker.startStream(typeofStream.Consent);
```

#### 3. Handle Stream Cleanup

```typescript
// Streams are automatically cleaned up by setupTestLifecycle
// Manual cleanup if needed:
afterEach(() => {
  workers.getAll().forEach(worker => {
    worker.worker.endStream();
  });
});
```

#### 4. Performance-Aware Assertions

```typescript
// For high-performance requirements
expect(result.allReceived).toBe(true);
expect(result.averageEventTiming).toBeLessThan(200);

// For reliability testing with some tolerance
expect(result.almostAllReceived).toBe(true);
expect(result.receptionPercentage).toBeGreaterThan(95);

// For large-scale testing with relaxed requirements
expect(result.receptionPercentage).toBeGreaterThan(80);
expect(result.orderPercentage).toBeGreaterThan(90);
```

### Common Stream Testing Patterns

#### Real-time Message Testing

```typescript
it("should deliver messages in real-time", async () => {
  try {
    // Start message streams
    workers.getReceiver().worker.startStream(typeofStream.Message);
    
    const dm = await alice.client.conversations.newDm(bob.client.inboxId);
    
    const verifyResult = await verifyMessageStream(
      dm,
      [workers.get("bob")],
      5,
      "realtime-{i}-{randomSuffix}"
    );
    
    expect(verifyResult.allReceived).toBe(true);
    expect(verifyResult.averageEventTiming).toBeLessThan(500);
  } catch (e) {
    logError(e, expect.getState().currentTestName);
    throw e;
  }
});
```

#### Group Update Notifications

```typescript
it("should notify all members of group updates", async () => {
  try {
    // Start group update streams
    workers.getAllButCreator().forEach(worker => {
      worker.worker.startStream(typeofStream.GroupUpdated);
    });
    
    const group = await workers.createGroupBetweenAll();
    
    const verifyResult = await verifyMetadataStream(
      group,
      workers.getAllButCreator(),
      3
    );
    
    expect(verifyResult.allReceived).toBe(true);
  } catch (e) {
    logError(e, expect.getState().currentTestName);
    throw e;
  }
});
```

## Available Worker Names

Use predefined names from the 61 available:

```typescript
["bob", "alice", "fabri", "elon", "joe", "charlie", "dave", "eve",
 "frank", "grace", "henry", "ivy", "jack", "karen", "larry", "mary",
 "nancy", "oscar", "paul", "quinn", "rachel", "steve", "tom", "ursula",
 "victor", "wendy", "xavier", "yolanda", "zack", ...]
```

## Error Handling

Always wrap test logic in try-catch:

```typescript
try {
  // Test operations
} catch (e) {
  logError(e, expect.getState().currentTestName);
  throw e;
}
```

## Test Organization

- Use `getWorkersWithVersions()` for version testing
- Use `typeofStream.Message` for message streaming
- Always call `setupTestLifecycle()` for proper cleanup
- Test file naming: `*.test.ts` in `suites/` directory

## Key Imports

```typescript
import { logError } from "@helpers/logger";
import { verifyMessageStream } from "@helpers/streams";
import { setupTestLifecycle } from "@helpers/vitest";

import { getWorkers } from "@workers/manager";
import { IdentifierKind } from "@xmtp/node-sdk";
```
