name: Railway deployment

on:
  push:
    branches:
      - main
    paths:
      - "package.json"

jobs:
  detect-version-bump:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check-version.outputs.version_changed }}
      new_version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check for version changes
        id: check-version
        run: |
          git diff HEAD^ HEAD -- package.json lerna.json */package.json | grep -q '"version"' && \
          echo "version_changed=true" >> $GITHUB_OUTPUT || \
          echo "version_changed=false" >> $GITHUB_OUTPUT

      - name: Extract new version
        id: extract-version
        if: steps.check-version.outputs.version_changed == 'true'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  create-and-merge-pr:
    needs: detect-version-bump
    if: needs.detect-version-bump.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      REGION: ${{ vars.REGION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Create deployment branch
        run: |
          VERSION="${{ needs.detect-version-bump.outputs.new_version }}"
          BRANCH_NAME="deploy"

          # Create new branch (or reset if it exists)
          git checkout -B $BRANCH_NAME

          # Add deployment metadata
          echo "{\"deployedAt\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"version\": \"$VERSION\"}" > deploy-metadata.json
          git add deploy-metadata.json

          # Commit and push
          git commit -m "Update deploy to version $VERSION"
          git push -f origin $BRANCH_NAME

      - name: Create PR
        id: create-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = "${{ needs.detect-version-bump.outputs.new_version }}";

            // Check if PR already exists
            const existingPRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:deploy`,
              state: 'open'
            });

            if (existingPRs.data.length > 0) {
              // Close existing PR
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: existingPRs.data[0].number,
                state: 'closed'
              });
            }

            // Create new PR
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Deploy deploy version ${version}`,
              body: `Automatic PR for deploying deploy version ${version}`,
              head: 'deploy',
              base: 'main'
            });
            return pr.data.number;
          result-encoding: string

      - name: Auto-merge PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt('${{ steps.create-pr.outputs.result }}');

            // Enable auto-merge
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'squash'
            });

      - name: Send Slack notification on failure
        if: failure() || cancelled()
        uses: ./.github/actions/slack-notification
        with:
          workflow-name: "Deploy"
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
