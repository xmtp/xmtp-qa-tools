name: Agents
description: "should verify performance of the library in the production network"

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: [dms]
        environment: [dev, production]
    env:
      DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
      XMTP_ENV: ${{ matrix.environment }}
      GEOLOCATION: ${{ vars.GEOLOCATION }}
      DEFAULT_STREAM_TIMEOUT_MS: 20000
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          # Disable built-in cache to use shared cache below
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
          key: deps-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            deps-
      - name: Install dependencies
        run: yarn
      - name: Run tests
        run: yarn test ${{ matrix.test }} --debug --no-fail
      - name: Send Slack notification on failure
        if: failure() || cancelled()
        run: |
          node -e "
          const https = require('https');

          const message = {
            channel: process.env.SLACK_CHANNEL || '#general',
            text: \`ðŸš¨ Workflow Failed: ${{ github.workflow }}\`,
            blocks: [
              {
                type: 'section',
                text: {
                  type: 'mrkdwn',
                  text: \`*Workflow:* ${{ github.workflow }}\\n*Test:* ${{ matrix.test }}\\n*Environment:* ${{ matrix.environment }}\\n*Status:* \${{ job.status == 'cancelled' ? 'Timed out' : 'Failed' }}\\n*Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>\`
                }
              }
            ]
          };

          const payload = JSON.stringify(message);
          const options = {
            hostname: 'slack.com',
            port: 443,
            path: '/api/chat.postMessage',
            method: 'POST',
            headers: {
              'Authorization': \`Bearer \${process.env.SLACK_BOT_TOKEN}\`,
              'Content-Type': 'application/json',
              'Content-Length': payload.length
            }
          };

          if (!process.env.SLACK_BOT_TOKEN) {
            console.log('SLACK_BOT_TOKEN not set, skipping notification');
            process.exit(0);
          }

          const req = https.request(options, (res) => {
            console.log(\`Slack notification sent: \${res.statusCode}\`);
          });

          req.on('error', (e) => {
            console.error(\`Error sending Slack notification: \${e.message}\`);
          });

          req.write(payload);
          req.end();
          "
      - name: Upload logs and environment
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-env-${{ matrix.environment }}-${{ matrix.test }}
          path: |
            logs/**/*
            .env
          if-no-files-found: ignore
          overwrite: true
          include-hidden-files: true
          retention-days: 90
      - name: Upload installation databases
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: install-db-${{ matrix.environment }}-${{ matrix.test }}
          path: |
            .data/**/*
          if-no-files-found: ignore
          overwrite: true
          include-hidden-files: true
          retention-days: 90
