name: Wildcard
description: "Manual PR verification workflow - supports functional and performance tests"

on:
  pull_request:

jobs:
  test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env: [production]
        test: [cache-test] # cache testing instead of actual tests
    env:
      DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
      XMTP_ENV: ${{ matrix.env }}
      LOGGING_LEVEL: error
      LOG_LEVEL: info
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
      REGION: ${{ vars.REGION }}
      BATCH_SIZE: 5-10
    steps:
      - uses: actions/checkout@v4

      - name: Setup test env
        uses: ./.github/actions/xmtp-test-setup
        with:
          cache-data: true
          test-name: ${{ matrix.test }}

      - name: Log initial state of .data and .env
        run: |
          echo "=== INITIAL STATE ==="
          echo "Current timestamp: $(date)"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run number: ${{ github.run_number }}"
          echo ""
          echo "=== .data directory ==="
          if [ -d ".data" ]; then
            echo "Directory exists"
            ls -la .data/ || echo "Cannot list .data contents"
            find .data -type f -name "*.json" | head -5 || echo "No JSON files found"
          else
            echo "Directory does not exist"
          fi
          echo ""
          echo "=== .env file ==="
          if [ -f ".env" ]; then
            echo "File exists"
            ls -la .env
            echo "First few lines:"
            head -3 .env || echo "Cannot read .env"
          else
            echo "File does not exist"
          fi

      - name: Create test files for cache verification
        run: |
          echo "=== CREATING TEST FILES ==="
          mkdir -p .data
          echo "Test data created at $(date)" > .data/cache-test-$(date +%s).txt
          echo "Cache test run: ${{ github.run_number }}" >> .data/cache-test-$(date +%s).txt
          echo "Run ID: ${{ github.run_id }}" >> .data/cache-test-$(date +%s).txt

          if [ ! -f ".env" ]; then
            echo "Creating .env file for testing"
            echo "XMTP_ENV=${{ matrix.env }}" > .env
            echo "LOGGING_LEVEL=error" >> .env
            echo "CACHE_TEST=true" >> .env
            echo "CREATED_AT=$(date)" >> .env
          else
            echo "Appending to existing .env file"
            echo "CACHE_TEST=true" >> .env
            echo "UPDATED_AT=$(date)" >> .env
          fi

          echo "Created files:"
          ls -la .data/
          echo "Updated .env:"
          cat .env

      - name: Log final state before cleanup
        run: |
          echo "=== FINAL STATE BEFORE CLEANUP ==="
          echo "Current timestamp: $(date)"
          echo ""
          echo "=== .data directory contents ==="
          if [ -d ".data" ]; then
            ls -la .data/
            echo ""
            echo "All .data files:"
            find .data -type f | sort
          else
            echo "Directory does not exist"
          fi
          echo ""
          echo "=== .env file contents ==="
          if [ -f ".env" ]; then
            cat .env
          else
            echo "File does not exist"
          fi

      - name: Run tests
        run: yarn test ${{ matrix.test }}

      - name: Cleanup and upload artifacts
        if: always()
        uses: ./.github/actions/xmtp-test-cleanup
        with:
          test-name: ${{ matrix.test }}
          env: ${{ matrix.env }}
          save-to-cache: true

      - name: Send Slack notification on failure
        if: failure() || cancelled()
        run: yarn workflow-failure "${{ matrix.test }}"
